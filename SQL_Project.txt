Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table =10000
iv. Checkin table =10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table =10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id:10000, business_id: 8090, user_id: 9581
vi. Checkin = business_id: 493
vii. Photo = id: 10000, business_id: 6493
viii. Tip = user_id: 537, business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	
	
	SQL code used to arrive at answer:
	SELECT COUNT(*) AS Null_Count
	FROM user
	WHERE name IS NULL OR 
	review_count IS NULL OR 
	yelping_since IS NULL OR
	useful IS NULL OR 
	funny IS NULL OR 
	cool IS NULL OR 
	fans IS NULL OR 
	average_stars IS NULL OR 
	compliment_hot IS NULL OR 
	compliment_more IS NULL OR 
	compliment_profile IS NULL OR 
	compliment_cute IS NULL OR 
	compliment_list IS NULL OR 
	compliment_note IS NULL OR 
	compliment_plain IS NULL OR 
	compliment_cool IS NULL OR 
	compliment_funny IS NULL OR 
	compliment_writer IS NULL OR 
	compliment_photos IS NULL 

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1 		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT SUM(review_count) AS NumberofReviews, city
	FROM business
	GROUP BY city
	ORDER BY NumberofReviews DESC
	
	Copy and Paste the Result Below:
	
	+-----------------+-----------------+
| NumberofReviews | city            |
+-----------------+-----------------+
|           82854 | Las Vegas       |
|           34503 | Phoenix         |
|           24113 | Toronto         |
|           20614 | Scottsdale      |
|           12523 | Charlotte       |
|           10871 | Henderson       |
|           10504 | Tempe           |
|            9798 | Pittsburgh      |
|            9448 | Montréal        |
|            8112 | Chandler        |
|            6875 | Mesa            |
|            6380 | Gilbert         |
|            5593 | Cleveland       |
|            5265 | Madison         |
|            4406 | Glendale        |
|            3814 | Mississauga     |
|            2792 | Edinburgh       |
|            2624 | Peoria          |
|            2438 | North Las Vegas |
|            2352 | Markham         |
|            2029 | Champaign       |
|            1849 | Stuttgart       |
|            1520 | Surprise        |
|            1465 | Lakewood        |
|            1155 | Goodyear        |
+-----------------+-----------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
 
SELECT SUM(review_count) AS NumberofReviews, city, stars
FROM business
WHERE city = "Avon"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-----------------+------+-------+
| NumberofReviews | city | stars |
+-----------------+------+-------+
|              10 | Avon |   1.5 |
|               6 | Avon |   2.5 |
|              88 | Avon |   3.5 |
|              21 | Avon |   4.0 |
|              31 | Avon |   4.5 |
|               3 | Avon |   5.0 |
+-----------------+------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT SUM(review_count) AS NumberofReviews, city, stars
FROM business
WHERE city = "Beachwood"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-----------------+-----------+-------+
| NumberofReviews | city      | stars |
+-----------------+-----------+-------+
|               8 | Beachwood |   2.0 |
|               3 | Beachwood |   2.5 |
|              11 | Beachwood |   3.0 |
|               6 | Beachwood |   3.5 |
|              69 | Beachwood |   4.0 |
|              17 | Beachwood |   4.5 |
|              23 | Beachwood |   5.0 |
+-----------------+-----------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT review_count, name, id
FROM user
ORDER BY review_count DESC
LIMIT 3	
		
	Copy and Paste the Result Below:
		
+--------------+--------+------------------------+
| review_count | name   | id                     |
+--------------+--------+------------------------+
|         2000 | Gerald | -G7Zkl1wIWBBmD0KRy_sCw |
|         1629 | Sara   | -3s52C4zL_DHRK0ULG6qtg |
|         1339 | Yuri   | -8lbUNlXVSoXqaRRiHiSNg |
+--------------+--------+------------------------+

8. Does posing more reviews correlate with more fans?
	Actually no. 

	Please explain your findings and interpretation of the results:
Even people with higher fans has more review than average, people who has most review doesn't have that much fans. When we look to yelping time we can't find a strong relationship with yelping time either. That's why i'm thinking fan number is related to place of yelping. You can find the queries and the tables that i looked.
	
SELECT name, review_count, fans, yelping_since
FROM user
ORDER BY fans DESC

+-----------+--------------+------+---------------------+ 
| name      | review_count | fans | yelping_since       |
+-----------+--------------+------+---------------------+
| Amy       |          609 |  503 | 2007-07-19 00:00:00 |
| Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
| Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
| Christine |          930 |  173 | 2009-07-08 00:00:00 |
| Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
| Cat       |          377 |  133 | 2009-02-05 00:00:00 |
| William   |         1215 |  126 | 2015-02-19 00:00:00 |
| Fran      |          862 |  124 | 2012-04-05 00:00:00 |
| Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
| Mark      |          861 |  115 | 2009-05-31 00:00:00 |
| Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |
| bernice   |          255 |  105 | 2007-08-29 00:00:00 |
| Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
| Angela    |          694 |  101 | 2010-10-01 00:00:00 |
| .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
| Ben       |          307 |   96 | 2007-03-10 00:00:00 |
| Linda     |          584 |   89 | 2005-08-07 00:00:00 |
| Christina |          842 |   85 | 2012-10-08 00:00:00 |
| Jessica   |          220 |   84 | 2009-01-12 00:00:00 |
| Greg      |          408 |   81 | 2008-02-16 00:00:00 |
| Nieves    |          178 |   80 | 2013-07-08 00:00:00 |
| Sui       |          754 |   78 | 2009-09-07 00:00:00 |
| Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
| Nicole    |          161 |   73 | 2009-04-30 00:00:00 |
+-----------+--------------+------+---------------------+



SELECT name, review_count, fans, yelping_since
FROM user
ORDER BY review_count DESC

+-----------+--------------+------+---------------------+
| name      | review_count | fans | yelping_since       |
+-----------+--------------+------+---------------------+
| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
| Sara      |         1629 |   50 | 2010-05-16 00:00:00 |
| Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
| .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
| William   |         1215 |  126 | 2015-02-19 00:00:00 |
| Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
| eric      |         1116 |   16 | 2007-05-27 00:00:00 |
| Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
| Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
| Christine |          930 |  173 | 2009-07-08 00:00:00 |
| Ed        |          904 |   38 | 2009-08-10 00:00:00 |
| Nicole    |          864 |   43 | 2006-08-02 00:00:00 |
| Fran      |          862 |  124 | 2012-04-05 00:00:00 |
| Mark      |          861 |  115 | 2009-05-31 00:00:00 |
| Christina |          842 |   85 | 2012-10-08 00:00:00 |
| Dominic   |          836 |   37 | 2011-02-06 00:00:00 |
| Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
| Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
| Alison    |          775 |   61 | 2007-07-02 00:00:00 |
| Sui       |          754 |   78 | 2009-09-07 00:00:00 |
| Tim       |          702 |   35 | 2009-01-21 00:00:00 |
| L         |          696 |   10 | 2010-04-29 00:00:00 |
| Angela    |          694 |  101 | 2010-10-01 00:00:00 |
| Crissy    |          676 |   25 | 2008-07-31 00:00:00 |
| Lyn       |          675 |   45 | 2009-11-07 00:00:00 |
+-----------+--------------+------+---------------------+


SELECT name, review_count, fans, yelping_since
FROM user
ORDER BY yelping_since ASC

+------------+--------------+------+---------------------+
| name       | review_count | fans | yelping_since       |
+------------+--------------+------+---------------------+
| Marc       |           14 |    0 | 2005-05-20 00:00:00 |
| Alex       |           75 |    8 | 2005-05-25 00:00:00 |
| T          |           40 |    3 | 2005-07-19 00:00:00 |
| Linda      |          584 |   89 | 2005-08-07 00:00:00 |
| Stacy      |          118 |   13 | 2005-08-31 00:00:00 |
| Joc        |          652 |   49 | 2005-09-03 00:00:00 |
| Kelly      |           71 |    4 | 2005-09-12 00:00:00 |
| Trish      |          354 |   13 | 2005-09-22 00:00:00 |
| Sam        |          115 |   12 | 2005-11-24 00:00:00 |
| Annie      |          651 |   52 | 2005-12-14 00:00:00 |
| Robert     |            4 |    1 | 2005-12-20 00:00:00 |
| Sarah      |          278 |   41 | 2005-12-21 00:00:00 |
| C          |          515 |   12 | 2005-12-21 00:00:00 |
| Steve      |          166 |    6 | 2006-01-17 00:00:00 |
| Andy       |          324 |   26 | 2006-01-25 00:00:00 |
| Brian      |          131 |   14 | 2006-01-31 00:00:00 |
| Lynda      |          483 |   34 | 2006-02-12 00:00:00 |
| Danial     |          136 |    5 | 2006-02-21 00:00:00 |
| vitas      |          108 |    5 | 2006-03-05 00:00:00 |
| Roanna     |         1039 |  104 | 2006-03-28 00:00:00 |
| Eric       |           45 |    1 | 2006-04-11 00:00:00 |
| John       |            3 |    0 | 2006-04-12 00:00:00 |
| Ruth       |           47 |   10 | 2006-04-13 00:00:00 |
| Jennifer   |          365 |    5 | 2006-04-16 00:00:00 |
| Fancypants |          472 |   15 | 2006-05-01 00:00:00 |
+------------+--------------+------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are 1780 love words in texts and 232 hate words

	
	SQL code used to arrive at answer:

	SELECT COUNT(*)			
	FROM review			
	WHERE text LIKE '%love%'	

	SELECT COUNT(*)			
	FROM review			
	WHERE text LIKE '%hate%'

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT id, name, fans
FROM user
ORDER BY fans DESC
LIMIT 10
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	


		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

2 of the 4-5 stars restaurants are open 6 days of the week but 2-3 resturant is open 7 days of the week. One of the 4-5 stars restaurant has the same working hours with the 2-3 stars resturant nearly in the same hours but the other 4-5 stars restaurant open less than the others.

ii. Do the two groups you chose to analyze have a different number of reviews?
   
Yes. 2-3 stars restaurant has the lowest reviews with the review count of 123 and the same working hours 4-5 stars restaurant has 768 and the other one has 168.      
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
It is hard to interpret about the two groups that i've chosen according to this data because there are only 3 places and the evidences are not that distinguishable.

SQL code used for analysis:

SELECT b.name, b.city, b.review_count, b.stars, h.hours, c.category,
CASE
    WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 Stars'
    WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 Stars'
END AS Star_Rating
FROM business b INNER JOIN hours h
ON b.id = h.business_id
INNER JOIN category c ON b.id = c.business_id
WHERE (b.city == 'Las Vegas' AND c.category = 'Restaurants')
AND (b.stars BETWEEN 2 AND 3 OR b.stars BETWEEN 4 AND 5)
ORDER BY Star_Rating DESC
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: 
         Businesses that are open has more stars but the difference is not that much part.
	OPEN:   AVG(stars) = 3.67900943396
        CLOSED: AVG(stars) = 3.52039473684  
ii. Difference 2:
        The businesses that are open tend to have more reviews than ones that
	are closed on average.
		
	Open:   AVG(review_count) = 31.757
	Closed: AVG(review_count) = 23.198
         
         
SQL code used for analysis:
SELECT COUNT(DISTINCT(id)),
AVG(review_count),
SUM(review_count),
AVG(stars),
is_open
FROM business
GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
    If a person wants to open a restaurant, i want to help them to choose best place to open a restaurant.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
     
After researching the cities with restaurants for comparison purposes, I categorized the restaurants based on their star ratings to facilitate a more comprehensive analysis. Additionally, I included neighborhood data in my query to gain further insights. Upon finalizing my code, I executed the query and interpreted the output to draw conclusions for my analysis.                      
                  
iii. Output of your finished dataset:
+----------------------------------------+-------------------+-----------------+-------------+--------------+-------------+
| name                                   | neighborhood      | city            | category    | review_count | Star_Rating |
+----------------------------------------+-------------------+-----------------+-------------+--------------+-------------+
| Big Wong Restaurant                    | Chinatown         | Las Vegas       | Restaurants |          768 | 4-5 stars   |
| Bootleggers Modern American Smokehouse |                   | Phoenix         | Restaurants |          431 | 4-5 stars   |
| Slyman's Restaurant                    | Goodrich Kirtland | Cleveland       | Restaurants |          361 | 4-5 stars   |
| Green Corner Restaurant                |                   | Mesa            | Restaurants |          267 | 4-5 stars   |
| Matt's Big Breakfast                   |                   | Phoenix         | Restaurants |          188 | 4-5 stars   |
| Jacques Cafe                           | Summerlin         | Las Vegas       | Restaurants |          168 | 4-5 stars   |
| Irish Republic                         |                   | Chandler        | Restaurants |          141 | 2-3 stars   |
| Eklectic Pie - Mesa                    |                   | Mesa            | Restaurants |          129 | 4-5 stars   |
| Wingstop                               |                   | Las Vegas       | Restaurants |          123 | 2-3 stars   |
| Cabin Club                             |                   | Westlake        | Restaurants |          105 | 4-5 stars   |
| Mad Mex - South Hills                  |                   | Pittsburgh      | Restaurants |          103 | 2-3 stars   |
| TWIISTED Burgers & Sushi               |                   | Medina          | Restaurants |           94 | 4-5 stars   |
| The Cider Mill                         |                   | Scottsdale      | Restaurants |           91 | 4-5 stars   |
| Edulis                                 | Niagara           | Toronto         | Restaurants |           89 | 4-5 stars   |
| Market Street Diner                    |                   | Sun Prairie     | Restaurants |           87 | None        |
| Senor Taco                             |                   | Litchfield Park | Restaurants |           83 | None        |
| Nabers Music, Bar & Eats               |                   | Chandler        | Restaurants |           75 | 4-5 stars   |
| Naniwa-Taro                            | Willowdale        | Toronto         | Restaurants |           75 | 4-5 stars   |
| Thirsty Goat                           |                   | Fitchburg       | Restaurants |           74 | None        |
| Hermanos Mexican Grill                 | Port Credit       | Mississauga     | Restaurants |           69 | 4-5 stars   |
| Five Guys                              |                   | Phoenix         | Restaurants |           63 | None        |
| Saigon Grille                          | Goodrich Kirtland | Cleveland       | Restaurants |           62 | None        |
| Masamune Japanese Restaurant           |                   | Mississauga     | Restaurants |           61 | 4-5 stars   |
| Gallagher's                            |                   | Phoenix         | Restaurants |           60 | 2-3 stars   |
| Seoul Garden Korean Restaurant         |                   | Cuyahoga Falls  | Restaurants |           55 | 4-5 stars   |
+----------------------------------------+-------------------+-----------------+-------------+--------------+-------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT b.name, b.neighborhood, b.city, c.category, b.review_count,
CASE
WHEN b.stars BETWEEN 0 AND 1 THEN '0-1 stars'
WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
END AS Star_Rating
FROM business b
INNER JOIN category c ON b.id = c.business_id
WHERE c.category = 'Restaurants'
ORDER BY review_count DESC